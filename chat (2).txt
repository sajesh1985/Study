
interface IChatRDContextValue {
  session?: string;
  payLoad?:PayloadDetails[];
}

const formats = ['MM/DD/YYYY','DD/MM/YYYY','YYYY/DD/MM','YYYY/MM/DD','YYYY-MM-DD','MM.DD.YYYY','DD.MM.YYYY','YYYY.MM.DD','YYYY.DD.MM','DD-MM-YYYY','MM-DD-YYYY'];
    let isvalid = moment(value,formats,true).isValid();

const context = React.createContext<IChatRDContextValue>({} as IChatRDContextValue);
export const ChatRDProvider: React.FC = ({ children }) => {
  const [session, setSession] = React.useState<string>("");
  const [payLoad, setPayload] = React.useState<PayloadDetails[]>([]);
  let [interactions, setInteractions] = React.useState<Interaction[]>([]);
  let [tableRef, setTable] = React.useState<GridModel[]>([]);
 
  const value: IChatRDContextValue = React.useMemo(() => {
    return {
      session,
      tableRef,
      setGridContext:(gridApi:any,interactionId:string)=>{
        let temp:GridModel={ interactionId:interactionId,gridData: gridApi};
        tableRef.push(temp); 
        setTable(tableRef);
      },
      askQuestion : useCallback((request: string): void => {
        setchatHistory("New");
        
    const interaction: Interaction = {
      sessionId:session,
      type:"user",
      id: new Date().valueOf().toString(),
      date: toDateCulture(
        new Date(),
        userInformation.mSTimeZoneID
      ), 
      req: request,
      loading: true,
    };
    
    try {
      if (request.toLowerCase() == 'chatrd legal disclaimer' || request.toLowerCase() == 'full disclaimer') {
        setInteractions([...interactions, interaction]);
          updateInteraction(interaction.id, {
            ...interaction,
            sessionId:null,
            loading: false,
            responseBody: [{ type: ContentType.Text, content: desclaimer }],
            responseContext:[],
            feedbackEnabled: false,
          });
      } 
      else {
        setInteractions([...interactions, interaction]);
        
          const args: InteractionRequestPayload = {
            sessionId: session,
            userInput: [
              {
                type: ContentType.Text,
                value: request,
              },
            ],
            previousInteractionId: getLastInteractionStreamId(),
            supportedNodeTypes: [
              ContentType.Text,
              ContentType.Code,
              ContentType.Table,
              ContentType.KnowledgeDiscovery,
            ],
          };
            
            const APIUrl = getStreamingAPIUrl();
            const baseInit = {
            method: 'POST',
            signal,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'text/event-stream'
            },
              body: JSON.stringify(args),
              openWhenHidden: true,
            };
            streamStart = 0;
            const { session_id: sessionId, interaction_id: interactionId } = JSON.parse("{}");
            const initialResponse: Interaction = {
              sessionId,
              type:"user",
              interactionId,
              responseBody: [{ type: ContentType.Text, content: 'Generating response' }],
              responseContext: [],
              id:'',
              loading:true
  
            };
            
            setInteractions((prev:any) => {
                      const next = [...prev];
                      return [...next, initialResponse];
            });

            fetchEventSource(APIUrl, {
              ...baseInit,
              onmessage(ev:any) {
                if(ev.data)
                {
                    const eventType = ev.event as EventType;
                let patch = { op: '', value: '',
                            path:''
                        };
                const patchesArr: any =[];
                let feedbackEnabled = false;
                let streamData = JSON.parse(ev.data);
                const { sessionId: sessionId, interactionId: interactionId,responseBody: responseBody, responseTimestamp: responseTimestamp,op:op } = streamData;
                if(op == 'end' && session == '')
                  {
                    setSession(sessionId);
                  }
                
                
        //setchatHistory("New");
        
      }
    } catch (e) {
      updateInteraction(interaction.id, {
        ...interaction,
        sessionId:session,
        loading: false,
        responseBody: [{ type: ContentType.Text, content: noResponse }],
        responseContext: [],
        feedbackEnabled: false,
      });
    }
      },[session,interactions]), 
      newInteraction: async (request: string) => {
        setchatHistory("New");
        const interaction: Interaction = {
          sessionId:session,
          type:"user",
          id: new Date().valueOf().toString(),
          date: toDateCulture(
            new Date(),
            userInformation.mSTimeZoneID
          ), 
          req: request,
          loading: true,
        };
        setInteractions([...interactions, interaction]);
        try {
          if (request.toLowerCase() == 'chatrd legal disclaimer' || request.toLowerCase() == 'full legal disclaimer') {
            updateInteraction(interaction.id, {
              ...interaction,
                sessionId:null,
              loading: false,
              responseBody: [{ type: ContentType.Text, content: desclaimer }],
              res: desclaimer,
              responseContext: [],
              feedbackEnabled: false,
            });
          else {
            const args: InteractionRequestPayload = {
              sessionId: session,
              keyonlineuser:userInformation?.keyOnlineUser,
              userInput: [
                {
                  type: ContentType.Text,
                  value: request,
                },
              ],
              previousInteractionId: getLastInteractionId(),
              supportedNodeTypes: [
                ContentType.Text,
                ContentType.Code,
                ContentType.Table,
                ContentType.KnowledgeDiscovery,
              ],
            };
            const response = await createInteraction(args);
            let temp:any[]=[];
            response?.responseBody.map((value: TextResponseNode | TableResponseNode | KnowledgeDiscoveryResponseNode)=>{
              if(value?.documents!=null && value?.documents.length > 0)
                if(value?.documents[0].details)
                  {
                    let payLoad:PayloadDetails = {interactionId:'',payload:''};
                    let payLoadDetails:PayloadDetails[] = [];
                    payLoad.interactionId = response.interactionId;
                    payLoad.payload = value?.documents[0].details;
                    payLoadDetails.push(payLoad);
                    setPayload(payLoadDetails);
                  }
                temp.push(value);
            });
              
            setSession(response?.sessionId);
            updateInteraction(interaction.id, {
              ...interaction,
              sessionId:response?.sessionId,
              id: response.interactionId,
              date:interaction.date,
              loading: false,
              res: (
                <>
                  <ResponseView data={response?.responseBody || null} interactionId={response.interactionId} interactionType='user' />
                  <br/>
                  <div className="responseDate" style={{display:'flex',marginLeft:'auto',marginRight:'-51px'}}>
                    <span>{toDateCultureResponse(
                    response?.responseTimestamp,
                    userInformation.mSTimeZoneID
                      )}</span>
                  </div>
                  {temp.length >0 && <H5>Sources:</H5>}
                  <ul style={{fontSize:'14px'}}>
                  <div>
                    {response?.responseBody.map((value: TextResponseNode | TableResponseNode | KnowledgeDiscoveryResponseNode) => 
                      value?.documents && value?.documents.map((doc:KnowledgeDiscoveryDocuments)=>(
                        <DocumentList>
                        <a href={doc.url} target="_blank">{doc.title}</a>
                        <span>{doc.date !=null ? " " + RESEARCH_MAPPING[doc.type as keyof typeof RESEARCH_MAPPING] + " published " + moment(doc.date).format('MMMM Do, YYYY') :''}</span>
                      </DocumentList>
                      )
                      
                    )) }
                  </div>
                </ul>

                </>
              ),
              responseContext: response?.responseContext,
              feedbackEnabled: true,
            });
          }
        } catch (e) {
          updateInteraction(interaction.id, {
            ...interaction,
            sessionId:session,
            loading: false,
            res: noResponse,
            responseContext: [],
            feedbackEnabled: false,
          });
        }
      }
      updateInteraction,
      scrollBottomMaxValue: document.getElementById('scrollToBottomLI')?.offsetTop || Infinity,
      payLoad
    };
  }, [session, interactions,chatHistory,tableRef,payLoad]);

  return <context.Provider value={value}>{children}</context.Provider>;
};

export const useChatRD = () => React.useContext(context);

{"destinations":[{"name":"(NASDAQGS:TSLA) Tesla, Inc. › Corporate Profile","path":[],"url":"company/profile?id=4574287","comments":[{"text":"RD","highlights":[],"contentType":"badge_rd"}],"additionalFields":[{"fieldName":"card type","fieldValue":"companies_typeahead"},{"fieldName":"rd_kos","fieldValue":"[874]"}]},{"name":"Tesla (SNL P&C Group) › Corporate Profile","path":[],"url":"company/profile?id=4574287&keystatentity=0FB60A59-5AA2-4393-942E-0DD1258E66B4","comments":[{"text":"Austin,TX,US | Operating","highlights":[],"contentType":"comment"}],"additionalFields":[{"fieldName":"id","fieldValue":"0FB60A59-5AA2-4393-942E-0DD1258E66B4"}]},{"name":"(OTCEM:TXLZ.F) Tesla Exploration Ltd. › Corporate Profile","path":[],"url":"company/profile?id=4977247","comments":[{"text":"Oil and Gas Equipment and Services | Calgary, Canada | Operating","highlights":[],"contentType":"comment"}],"additionalFields":[{"fieldName":"card type","fieldValue":"companies_typeahead"},{"fieldName":"recentDestinationFiltered","fieldValue":"false"}]},{"name":"Tesla › Corporate Profile","path":[],"url":"company/profile?id=26663685","comments":[{"text":"Chateaubernard, France | Operating","highlights":[],"contentType":"comment"}],"additionalFields":[{"fieldName":"card type","fieldValue":"companies_typeahead"},{"fieldName":"rd_kos","fieldValue":"null"}]},{"name":"Tesla Insurance Company (Combined) › Corporate Profile","path":[],"url":"company/profile?id=4574287&keystatentity=F2BE46CE-8FE6-4F00-9EBA-3AEB97CAF986","comments":[{"text":"Austin,TX,US | 529 | Operating","highlights":[],"contentType":"comment"}],"additionalFields":[{"fieldName":"id","fieldValue":"F2BE46CE-8FE6-4F00-9EBA-3AEB97CAF986"}]},{"name":"Tesla Insurance Company › Corporate Profile","path":[],"url":"company/profile?id=11790","comments":[{"text":"Draper, Utah, USA | Operating Subsidiary | NAIC: 24813","highlights":[],"contentType":"comment"}],"additionalFields":[{"fieldName":"card type","fieldValue":"companies_typeahead"},{"fieldName":"rd_kos","fieldValue":"null"}]}]}
